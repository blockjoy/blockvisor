name: BV

on:
  push:
    branches:
      - "main"
      - "master"
  pull_request:
    branches:
      - "main"
      - "master"

env:
  RUST_LOG: trace

jobs:
  bv_tests:
    name: Blockvisord Tests
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: x86_64-unknown-linux-musl
          override: true
      - name: Setup packages
        run: >
          sudo apt -y install build-essential pkg-config libssl-dev cmake tmux musl-tools pigz awscli

      - name: Build and Reinstall
        run: |
          make ci-clean
          make reinstall
          AWS_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }} AWS_REGION=us-east-1 \
            aws --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com/ s3 cp \
            babel_api/protocols/testing/babel.rhai \
            s3://cookbook-dev/chains/testing/validator/0.0.1/babel.rhai --metadata '{"status":"development"}'
          AWS_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }} AWS_REGION=us-east-1 \
            aws --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com/ s3 cp \
            babel_api/protocols/testing/babel.rhai \
            s3://cookbook-dev/chains/testing/validator/0.0.2/babel.rhai --metadata '{"status":"development"}'
          AWS_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }} AWS_REGION=us-east-1 \
            aws --endpoint-url https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com/ s3 cp \
            babel_api/protocols/testing/babel.rhai \
            s3://cookbook-dev/chains/testing/validator/0.0.3/babel.rhai --metadata '{"status":"development"}'

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - uses: 'docker/login-action@v1'
        with:
          registry: 'us-docker.pkg.dev'
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'

      - run: |-
          echo '${{ steps.auth.outputs.access_token }}' | docker login -u oauth2accesstoken --password-stdin https://us-docker.pkg.dev

      - name: Pull images
        run: >
          docker compose pull

      - name: Start test env
        run: >
          docker compose up -d
      - name: Test
        run: >
          cargo test -p blockvisord -- --test-threads=9
      - name: Shutdown test env
        if: always()
        run: >
          docker compose down

  babel_tests:
    name: Babel Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Test
        run: >
          cargo test -p babel

  protocols_tests:
    name: Protocols Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Test
        run: >
          cargo test -p babel_api

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install protoc
        run: |
          PB_REL="https://github.com/protocolbuffers/protobuf/releases"
          curl -LO $PB_REL/download/v3.15.8/protoc-3.15.8-linux-x86_64.zip
          unzip protoc-3.15.8-linux-x86_64.zip -d $HOME/.local
          export PATH="$PATH:$HOME/.local/bin"
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: clippy, rustfmt
          override: true
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check
      - name: Catch common mistakes
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

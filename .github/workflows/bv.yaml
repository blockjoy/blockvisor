name: BV

on:
  push:
    branches:
      - "main"
      - "master"
  pull_request:
    branches:
      - "main"
      - "master"

env:
  RUST_LOG: trace

jobs:
  bv_tests:
    name: Blockvisord Tests
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Get branch name
        id: branch-names
        uses: tj-actions/branch-names@v8
      - name: Checkout API
        uses: actions/checkout@v3
        if: steps.branch-names.outputs.current_branch == 'master'
        with:
          submodules: true
          repository: blockjoy/blockvisor-api
          token: ${{ secrets.CHECKOUT_BLOCKJOY }}
          path: api
      - name: Checkout API
        uses: actions/checkout@v3
        if: steps.branch-names.outputs.current_branch != 'master'
        with:
          submodules: true
          repository: blockjoy/blockvisor-api
          token: ${{ secrets.CHECKOUT_BLOCKJOY }}
          path: api
          ref: ${{ steps.branch-names.outputs.current_branch }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: x86_64-unknown-linux-musl
      - name: Setup packages
        run: >
          sudo apt -y install build-essential pkg-config libssl-dev cmake musl-tools pigz awscli

      - name: Build and Reinstall
        run: |
          make ci-cleanup
          RUST_LOG="off" make ci-setup

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - uses: 'docker/login-action@v1'
        with:
          registry: 'us-docker.pkg.dev'
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'

      - name: Authenticate to docker registry
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }}
          export AWS_ACCOUNT_ID=${{ secrets.R2_ACCOUNT_ID }}
          export CF_TOKEN=${{ secrets.CF_TOKEN }}
          envsubst < docker-compose.yml.template > docker-compose.yml
          echo '${{ steps.auth.outputs.access_token }}' | docker login -u oauth2accesstoken --password-stdin https://us-docker.pkg.dev

      - name: Build API images
        run: |
          docker build -t api -f api/docker/Dockerfile api/
          docker build -t vault-init -f api/docker/vault/Dockerfile api/docker/vault/

      - name: Pull images
        run: >
          docker compose pull

      - name: Start test env
        run: >
          docker compose up -d

      - name: Test
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }}
          export AWS_ACCOUNT_ID=${{ secrets.R2_ACCOUNT_ID }}
          RUST_LOG="off" cargo test -p blockvisord -- --test-threads=9

      - name: Shutdown test env
        if: always()
        run: >
          docker compose down

  babel_tests:
    name: Babel Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - name: Test
        run: >
          RUST_LOG="off" cargo test -p babel -p bv_utils

  protocols_tests:
    name: Babel API Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - name: Test
        run: >
          RUST_LOG="off" cargo test -p babel_api

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install protoc
        run: |
          PB_REL="https://github.com/protocolbuffers/protobuf/releases"
          curl -LO $PB_REL/download/v3.15.8/protoc-3.15.8-linux-x86_64.zip
          unzip protoc-3.15.8-linux-x86_64.zip -d $HOME/.local
          export PATH="$PATH:$HOME/.local/bin"
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: clippy, rustfmt
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check
      - name: Catch common mistakes
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --tests -- -D warnings -Drust-2018-idioms

const METADATA = #{
    /// A semver version of the babel program, indicating the minimum version of the babel
    /// program that a babel script is compatible with.
    min_babel_version: "{{ babel_version }}",
    /// Version of Linux kernel to use in VM.
    kernel: "5.10.174-build.1+fc.ufw",
    /// A semver version of the blockchain node program.
    node_version: "0.0.1",
    /// Name of the blockchain protocol.
    protocol: "{{ protocol }}",
    /// Type of the node (validator, beacon, etc).
    node_type: "{{ node_type }}",
    /// [optional] Some description of the node.
    description: "{{ protocol }} {{ node_type }}",
    /// Blockchain resource requirements.
    requirements: #{
        /// Virtual cores to share with VM
        vcpu_count: 1,
        /// RAM allocated to VM in MB
        mem_size_mb: 2048,
        /// Size of data drive for storing blockchain data (not to be confused with OS drive)
        disk_size_gb: 1,
    },
    /// Supported blockchain networks.
    nets: #{
        /// Key is the name of blockchain network
        test: #{
            /// Url for given blockchain network.
            url: "https://testnet-api.helium.wtf/v1/",
            /// Blockchain network type.
            /// Allowed values: "dev", "test", "main"
            net_type: "test",
            /// [optional] Custom network metadata can also be added.
            /// example: beacon_nodes_csv: "http://beacon01.goerli.eth.blockjoy.com,http://beacon02.goerli.eth.blockjoy.com?789",
        },
        main: #{
            url: "https://rpc.ankr.com/eth",
            net_type: "main",
        },
    },
    /// Configuration of Babel - agent running inside VM.
    babel_config: #{
        /// Capacity of log buffer (in lines).
        log_buffer_capacity_ln: 1024,
        /// Size of swap file created on the node, in MB.
        swap_size_mb: 512,
        /// Location of swap file.
        swap_file_location: "/swapfile",
        /// Set RAM disks inside VM
        ramdisks: [
            #{
                /// Path to mount RAM disk to.
                ram_disk_mount_point: "/mnt/ramdisk",
                /// RAM disk size, in MB.
                ram_disk_size_mb: 512,
            },
        ]
    },
    /// Node firewall configuration.
    firewall: #{
        /// Fallback action for inbound traffic used when packet doesn't match any rule.
        /// Allowed values: "allow", "deny", "reject"
        default_in: "deny",
        /// Fallback action for outbound traffic used when packet doesn't match any rule.
        /// Allowed values: "allow", "deny", "reject"
        default_out: "allow",
        /// Set of rules to be applied.
        rules: [
            #{
                /// Unique rule name.
                name: "Allowed incoming tcp traffic on port",
                /// Action applied on packet that match rule.
                /// Allowed values: "allow", "deny", "reject"
                action: "allow",
                /// Traffic direction for which rule applies.
                /// Allowed values: "out", "in"
                direction: "in",
                /// [optional] Protocol - "both" by default.
                /// Allowed values: "tcp", "udp", "both"
                protocol: "tcp",
                /// [optional] Ip(s) compliant with CIDR notation.
                /// ips: "192.167.0.1/24",
                /// List of ports. Empty means all.
                ports: [24567], /// ufw allow in proto tcp port 24567
            },
            #{
                name: "Allowed incoming udp traffic on ip and port",
                action: "allow",
                direction: "in",
                protocol: "udp",
                ips: "192.168.0.1",
                ports: [24567], /// ufw allow in proto udp from 192.168.0.1 port 24567
            },
        ],
    },
};

/// You can define some constants to use in the code
const NETS = #{
    /// Key is the name of blockchain network
    test: #{
        /// Url for given blockchain network.
        url: "https://testnet-api.helium.wtf/v1/",
        /// Blockchain network type.
        /// Allowed values: "dev", "test", "main"
        net_type: "test",
        /// [optional] Custom network metadata can also be added.
        /// example: beacon_nodes_csv: "http://beacon01.goerli.eth.blockjoy.com,http://beacon02.goerli.eth.blockjoy.com?789",
        seeds: "test seed"
    },
    main: #{
        url: "https://rpc.ankr.com/eth",
        net_type: "main",
        seeds: "main seed"
    },
};
const API_HOST = "http://localhost:4467/";
const A_DIR = BLOCKCHAIN_DATA_PATH + "/A";
const B_DIR = BLOCKCHAIN_DATA_PATH + "/B";
const NET =  global::NETS[node_params().NETWORK];

const BABEL_VERSION = "{{ babel_version }}";
const PLUGIN_CONFIG = #{
    init: #{
        /// list of sh commands to be executed first
        commands: [
            `mkdir -p /opt/netdata/var/cache/netdata`,
        ],
        /// list of sh jobs (long running tasks), to be starten then
        jobs: [
            #{
                /// Unique job name.
                name: "init_job",
                /// Sh script body.
                run_sh: `openssl rand -hex 32 > ${global::A_DIR}/jwt.txt`,
                /// [optional] InitJob restart policy.
                /// If not set default to "never".
                //restart: "never",
                /// [optional] Job shutdown timeout - how long it may take to gracefully shutdown the job.
                /// After given time job won't be killed, but babel will rise the error.
                /// If not set default to 60s.
                //shutdown_timeout_secs: 120,
                /// [optional] POSIX signal that will be sent to child processes on job shutdown.
                /// See [man7](https://man7.org/linux/man-pages/man7/signal.7.html) for possible values.
                /// If not set default to `SIGTERM`.
                //shutdown_signal: "SIGTINT",
                /// [optional] maximum number of retries, or there is no such limit if not set
                //needs: ["other_init_job_name"],
                /// [optional] Run job as a different user.
                //run_as: "some_user",
                /// [optional] Capacity of log buffer (in lines).
                /// If not set default to 1024.
                //log_buffer_capacity_ln: 512,
            }
        ]
    },
    /// list of services to be started once init jobs and download is finished
    services: [
        #{
            /// Unique service job name.
            name: "blockchain_service_a",
            /// Sh script body
            run_sh: `/usr/bin/blockchain_service_a start --home=${global::A_DIR} --chain=${global::NET.net_type} --rest-server --seeds ${global::NET.seeds} "$@"`,
            /// [optional] Job restart config.
            /// If not set default to:
            /// #{
            ///    backoff_timeout_ms: 60000,
            ///    backoff_base_ms: 1000,
            /// }
            //restart_config: #{
                /// if job stay alive given amount of time (in milliseconds) backoff is reset
                //backoff_timeout_ms: 60000,
                /// base time (in milliseconds) for backoff,
                /// multiplied by consecutive power of 2 each time
                //backoff_base_ms: 1000,
                /// [optional] maximum number of retries, or there is no such limit if not set
                //max_retries: 13,
            //},
            /// [optional] Job shutdown timeout - how long it may take to gracefully shutdown the job.
            /// After given time job won't be killed, but babel will rise the error.
            /// If not set default to 60s.
            //shutdown_timeout_secs: 120,
            /// [optional] POSIX signal that will be sent to child processes on job shutdown.
            /// See [man7](https://man7.org/linux/man-pages/man7/signal.7.html) for possible values.
            /// If not set default to `SIGTERM`.
            //shutdown_signal: "SIGTINT",
            /// [optional] Run job as a different user.
            //run_as: "some_user",
            /// [optional] Flag indicating if service uses blockchain data.
            /// Services that uses blockchain data won't be started until all init steps and download
            /// is finished. They are also stopped while uploading blockchain archive.
            /// If not set default to true.
            //use_blockchain_data: true,
            /// [optional] Capacity of log buffer (in lines).
            /// If not set default to 1024.
            //log_buffer_capacity_ln: 2048,
        },
        #{
            name: "blockchain_service_b",
            run_sh: `/usr/bin/blockchain_service_b --chain=${global::NET.net_type} --datadir=${global::A_DIR} --snapshots=false`,
        }
    ],
    /// [optional] download configuration
    /// built-in download will be started once all init jobs are finished
    //download: #{
        /// [optional] Maximum number of parallel opened connections.
        /// If not set default to 3.
        //max_connections: 5,
        /// [optional] Maximum number of parallel workers.
        /// If not set default to 8.
        //max_runners: 8,
        /// [optional] Job restart config.
        /// If not set default to:
        /// #{
        ///    backoff_timeout_ms: 600000,
        ///    backoff_base_ms: 500,
        ///    max_retries: 10,
        /// }
        //restart_config: #{
            //backoff_timeout_ms: 60000,
            //backoff_base_ms: 1000,
            //max_retries: 5,
        //},
    //},
    /// [optional] alternative download if archive for standard one is not available
    //alternative_download: #{
        /// Sh script body.
        //run_sh: `/usr/bin/wget -q -O - some_url`,
        /// [optional] InitJob restart config.
        /// If not set default to "never".
        //restart_config: #{
            //backoff_timeout_ms: 60000,
            //backoff_base_ms: 10000,
            //max_retries: 3,
        //},
        /// [optional] Run job as a different user.
        //run_as: "some_user",
        /// [optional] Capacity of log buffer (in lines).
        /// If not set default to 1024.
        //log_buffer_capacity_ln: 512,
    //},
    /// [optional] post-download sh jobs, to be started after download
    //post_download: [
        //#{
            //name: "post_download_job",
            //run_sh: `echo restoreDB`,
        //}
    //],
    /// [optional] pre-upload action
    //pre_upload: #{
        /// list of sh commands to be executed before upload
        //commands: [
            //`echo uploading`,
        //],
        /// list of sh jobs (long running tasks), to be started before upload
        //jobs: [
            //#{
                //name: "pre_upload_job",
                //run_sh: `echo dumpDB`,
            //}
        //]
    //},
    /// [optional] upload configuration
    /// built-in upload can be manually triggered with `bv node run upload`
    upload: #{
        /// [optional] List of exclude patterns. Files in `BLOCKCHAIN_DATA_PATH` directory that match any of pattern,
        /// won't be taken into account.
        exclude: [
            "**/something_to_ignore*",
            ".gitignore",
            "some_subdir/*.bak",
        ],
        /// [optional] Compression to be used on chunks.
        /// If not set default to `ZSTD: 3`.
        //compression: #{
            //ZSTD: 5, /// compression level
        //},
        /// [optional] Maximum number of parallel opened connections.
        /// If not set default to 3.
        //max_connections: 4,
        /// [optional] Maximum number of parallel workers.
        /// If not set default to 8.
        //max_runners: 12,
        /// [optional] Number of chunks that blockchain data should be split into.
        /// Recommended chunk size is about 1GB. Estimated by BV based on data size, if not provided.
        /// If not set calculated automatically by BV.
        //number_of_chunks: 700,
        /// [optional] Seconds after which presigned urls in generated `UploadManifest` may expire.
        /// If not set calculated automatically by BV.
        //url_expires_secs: 240000,
        /// [optional] Version number for uploaded data. Auto-assigned if not provided.
        /// If not set calculated automatically by Blockvisor API.
        //data_version: 3,
        /// [optional] Job restart config.
        /// If not set default to:
        /// #{
        ///    backoff_timeout_ms: 600000,
        ///    backoff_base_ms: 500,
        ///    max_retries: 10,
        /// }
        //restart_config: #{
            //backoff_timeout_ms: 60000,
            //backoff_base_ms: 1000,
            //max_retries: 5,
        //},
    },
    /// [optional] post-upload sh jobs, to be started after upload
    //post_upload: [
        //#{
            //name: "post_upload_job",
            //run_sh: `echo cleanup_after_upload`,
        //}
    //],
    /// [optional] List of tasks to be scheduled on init.
    //scheduled: [
        //#{
            /// Unique name of the task.
            //name: "some_task",
            /// Cron schedule expression.
            //schedule: "* * * * * * *",
            /// Function name to be executed according to schedule.
            //function: "fn_name",
            /// [optional] Parameter to ba passed to function.
            //param: "param_value",
        //}
    //],
};

/// Returns blockchain application status.
/// SHALL be implemented
fn application_status() {
    /// "uploading", "downloading", "initializing" statuses are automatically handled by BV if BABEL_CONFIG const is defined
    let result = run_jrpc(#{
            host: global::API_HOST,
            method: "health.health",
            headers: [["content-type", "application/json"]]
        }).expect(200);

    if result.healthy != "false" || result.result.checks.bootstrapped.error == "subnets not bootstrapped" {
        "broadcasting"
    } else {
        "delinquent"
    }
}

/// Returns the height of the blockchain (in blocks).
/// SHOULD be implemented
fn height() {
    parse_hex(run_jrpc(#{ host: global::API_HOST, method: "info_height"}).expect(200).result)
}

/// Returns the block age of the blockchain (in seconds).
/// SHOULD be implemented
fn block_age() {
    run_jrpc(#{ host: global::API_HOST, method: "info_block_age"}).expect(200).result.block_age
}

/// The address of the node.
/// The meaning of this varies from blockchain to blockchain.
/// SHOULD be implemented
fn address() {
    run_jrpc(#{ host: global::API_HOST, method: "peer_addr"}).expect(|code| code >= 204).result.peer_addr.to_string()
}

/// Returns the name of the node.
/// The meaning of this varies from blockchain to blockchain.
/// SHOULD be implemented
fn name() {
    run_jrpc(#{ host: global::API_HOST, method: "info_name"}).expect(200).result.name.to_string()
}

/// Returns bool whether this node is in consensus or not.
/// SHOULD be implemented
fn consensus() {
    false
}

/// Returns blockchain synchronization status.
/// SHOULD be implemented
fn sync_status() {
    "synced"
}

/// Returns blockchain staking status.
/// SHOULD be implemented
fn staking_status() {
    "staking"
}

/// Test functions starting with test_ COULD be implemented as part of test harness
/// Running `bv node check ID_OR_NAME` will execute all defined test_* functions
/// MAY be implemented
fn test_height_value(param) {
    if height() < 0 {
        throw "Invalid node height value: " + height();
    }
}

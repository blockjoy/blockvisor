# Semantic version of the image. Must be increased according to the change type (major.minor.patch)
version: 0.0.1

# Associated container image uri. May be arbitrary, but recommended convention is docker://<org>/<protocol_key>/<variant_key>/<version>
# To test with local image use docker-daemon://<image_tag>:latest
container_uri: docker://blockjoy/{{protocol_key}}/{{variant_key}}/0.0.1

# The SKU code for this version (e.g. ETH-MN).
sku_code: SKU_code

# [optional] Uuid of organization to which protocol belongs to, or null if public.
org_id: null

# [optional] Brief image description.
description: Example image description

# Image visibility, allowed values: `public`, `dev`, `private`.
visibility: private

# Name of protocol that is expected to be already populated in the API.
# It is required to be lower-kebab-case.
protocol_key: {{protocol_key}}

variants:
  # The same protocol can have different implementations. This field let identify what implementation(s) has been used.
  # Variant name may additional contain protocol network name e.g. "eth-mainnet".
  # This value will be available in a Rhai runtime via `node_env().variant_key`.
  # It is required to be lower-kebab-case.
  - key: {{variant_key}}
    # List of protocol data archive pointers.
    archive_pointers:
      # Association of image variant with protocol data archive. Identify protocol data archive that will be used
      # with given image variant and combination of properties that affect protocol data set (property with `new_archive` flag true).
      - pointer: !store_id
          # Unique `store_id` should change whenever protocol data set (or format) changes. E.g. if some version of the image
          # breaks backward compatibility of the data, then `store_id` must be change (e.g. by appending version postfix).
          # `store_id` can be also reused if some image variants (even from different protocols) can use the same data archives.
          # `store_id` is required to be lower-kebab-case.
          {{protocol_key}}-{{variant_key}}-v1
      - pointer: !store_id unique-id-x-v1
        # Combination of properties (with new_archive flag true).
        # Typically, properties doesn't affect data set and there is only one `store_id`, but
        # if it is necessary to introduce properties with `new_archive` flag true, all combinations must be defined here.
        new_archive_properties: [ "switch-property-on-value" ]
      - pointer: !store_id unique-id-y-v1
        new_archive_properties: [ "enum-property-variant-c" ]
      # `pointer` can be set to `combination_disallowed` if given properties combination isn't valid.
      - pointer: !combination_disallowed
        new_archive_properties: [ "switch-property-on-value" , "enum-property-variant-c" ]

    # Minimum CPU required to run image.
    min_cpu: 1

    # Minimum RAM memory required to run image.
    min_memory_bytes: 1000000000

    # Minimum disk space required to run image.
    min_disk_bytes: 2000000000

    # [optional] Ram disks to be created inside the node.
    ramdisks:

      # Path to mount RAM disk to.
      - mount: /mnt/ramdisk
        # RAM disk size.
        size_bytes: 100000000

# Default firewall configuration.
firewall_config:

  # Fallback action for inbound traffic used when packet doesn't match any rule. Allowed values: `deny`, `allow`, `reject`.
  default_in: deny

  # Fallback action for outbound traffic used when packet doesn't match any rule. Allowed values: `deny`, `allow`, `reject`.
  default_out: allow

  # List of firewall rules.
  rules:

    # Unique rule key.
    - key: example_rule
      # [optional] Brief rule description.
      description: null

      # Allowed values: `tcp`, `udp`, `both`.
      protocol: both

      # Traffic direction for which rule applies. Allowed values: `in`, `out`.
      direction: in

      # Action applied on packet that match rule. Allowed values: `deny`, `allow`, `reject`.
      action: allow

      # List of IPs for which rule apply.
      ips:

        # IP(s) compliant with CIDR notation.
        - ip: 1.2.3.4/30

          # [optional] Brief ip description.
          name: authorize client ip

      # List of ports for which rule apply.
      ports:

        # Port number.
        - port: 12901

          # [optional] Port number.
          name: service port

# List of image properties, allowed values and the way they affect required resources.
properties:

  # Unique property key. Property value will be available in a Rhai runtime via `node_params().<key>` (e.g. `node_params().arbitrary_property`).
  # It is required to be lower-kebab-case.
  - key: arbitrary-text-property

    # [optional] Brief property description.
    description: this is some text property example

    # If it can be updated after node is created, or it can be set only once on node creation.
    dynamic_value: true

    # Default property value, if not provided by user.
    default_value: default_value

    # The way it should be presented to the user.
    ui_type: !text

      # If it requires different protocol data set (affect archive_id).
      new_archive: false

      # [optional] How existence of property affect required CPU.
      add_cpu: 1

      # [optional] How existence of property affect required memory.
      add_memory_bytes: -1

      # [optional] How existence of property affect required disk space.
      add_disk_bytes: 10

  - key: switch-property
    description: this is some switch example
    dynamic_value: true
    default_value: off-value
    ui_type: !switch
      on:
        value: on-value
        impact:
          new_archive: true
          add_cpu: 3
          add_memory_bytes: 10000000
          add_disk_bytes: 10000000000
      off:
        value: off-value
        impact: null

  - key: enum-property
    description: this is some enum example
    dynamic_value: true
    default_value: variant-a
    ui_type: !enum
      - value: variant-a
        impact: null
      - value: variant-b
        impact: null
      - value: variant-c
        impact:
          new_archive: true
          add_cpu: -1
          add_memory_bytes: 1000000
          add_disk_bytes: 1000000000

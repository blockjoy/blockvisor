syntax = "proto3";

package blockjoy.api.v1.babel;

import "google/protobuf/empty.proto";

/* Define staging status */
enum StatusName {
  UndefinedStatusName = 0;
  Development = 1;
  Unstable = 2;
  Stable = 3;
}

/* Message type used for identifying a specific plugin */
message PluginIdentifier {
  /* snake_cased name of the blockchain */
  string protocol = 1;
  /* snake_cased name of the node type */
  string node_type = 2;
  /* semantic version string of the node type version */
  string node_version = 3;
  /* Does defined tuple have the requested tag assigned */
  StatusName status = 4;
}

message BundleIdentifier {
  /* semantic version string of the bundle version */
  string version = 1;
}

message Plugin {
  PluginIdentifier identifier = 1;
  /* Plugin script contents */
  bytes rhai_content = 2;
}

message ArchiveLocation {
  string url = 1;
}

message BabelVersionsRequest {
  string protocol = 1;
  string node_type = 2;
  StatusName status = 3;
}

message BabelVersionsResponse {
  repeated PluginIdentifier identifiers = 1;
}

message BundleVersionsRequest {
  StatusName status = 1;
}

message BundleVersionsResponse {
  repeated BundleIdentifier identifiers = 1;
}

/* Babel cookbook service */
service CookBookService {
  /* Retrieve plugin for specific version and state */
  rpc RetrievePlugin(PluginIdentifier) returns (Plugin) {}
  /* Retrieve image for specific version and state */
  rpc RetrieveImage(PluginIdentifier) returns (ArchiveLocation) {}
  /* Retrieve kernel file for specific version and state */
  rpc RetrieveKernel(PluginIdentifier) returns (ArchiveLocation) {}
  /* List all available babel versions */
  rpc ListBabelVersions(BabelVersionsRequest) returns (BabelVersionsResponse) {}
  /* Promote/Demote plugin/image to the desired state */
  rpc AddStage(PluginIdentifier) returns (google.protobuf.Empty) {}
  /* Disable plugin in the desired state */
  rpc RemoveStage(PluginIdentifier) returns (google.protobuf.Empty) {}
  /* Delete plugin/image from storage */
  rpc Delete(PluginIdentifier) returns (google.protobuf.Empty) {}
}

/* Retrieve manage BVD bundles */
service BundleService {
  /* Retrieve image for specific version and state */
  rpc Retrieve(BundleIdentifier) returns (ArchiveLocation) {}
  /* List all available bundle versions */
  rpc ListBundleVersions(BundleVersionsRequest) returns (BundleVersionsResponse) {}
  /* Promote/Demote bundle to the desired state */
  rpc AddStage(BundleIdentifier) returns (google.protobuf.Empty) {}
  /* Disable bundle in the desired state */
  rpc RemoveStage(BundleIdentifier) returns (google.protobuf.Empty) {}
  /* Delete bundle from storage */
  rpc Delete(BundleIdentifier) returns (google.protobuf.Empty) {}
}

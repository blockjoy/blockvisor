version: '3'

services:
  database:
    image: 'postgres:latest'
    ports:
      - 25432:5432
    environment:
      POSTGRES_USER: blockvisor
      POSTGRES_PASSWORD: password
      POSTGRES_DB: blockvisor_db
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U blockvisor -d blockvisor_db"
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  mqtt:
    image: emqx/emqx-enterprise:5.0.0
    ports:
      - 1883:1883
      - 8083:8083
      - 8084:8084
      - 8883:8883
      - 18083:18083

  api:
    image: 'us-docker.pkg.dev/blockjoy-deployer/blockvisor-api/dev-blockvisor-api:latest'
    ports:
      - 8080:8080
    environment:
      EMAIL_TEMPLATE_DIR: /emails
      CHARGEBEE_SECRET: asdfasdf
      DATABASE_URL: postgres://blockvisor:password@database:5432/blockvisor_db
      TOKEN_EXPIRATION_MINS: 10
      REFRESH_EXPIRATION_USER_MINS: 1200
      REFRESH_EXPIRATION_HOST_MINS: 120000
      PWD_RESET_EXPIRATION_MINS: 5
      REGISTRATION_CONFIRMATION_MINS: 30
      INVITATION_MINS: 10080
      JWT_SECRET: 1245456
      REFRESH_SECRET: 23942390
      UI_BASE_URL: https://localhost:3000
      RUST_LOG: info,blockvisor=debug
      # cookbook service
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: us-east-1
      STORAGE_URL: https://${AWS_ACCOUNT_ID}.r2.cloudflarestorage.com
      COOKBOOK_BUCKET: cookbook-dev
      BUNDLE_BUCKET: bundle-dev
      KERNEL_BUCKET: kernel-dev
      ARCHIVE_BUCKET: archive-dev
      DIR_CHAINS_PREFIX: chains
      PRESIGNED_URL_EXPIRATION: 1h
      # key service
      KEY_SERVICE_URL: http://api:8080
      # mqtt
      MQTT_SERVER_ADDRESS: mqtt
      MQTT_SERVER_PORT: 8883
      MQTT_USERNAME: public
      MQTT_PASSWORD: public
      # cloudflare
      CF_BASE_URL: https://api.cloudflare.com/client/v4
      CF_ZONE: 89560cdd783e35f7a9d718755ea9c656
      CF_DNS_BASE: n0des.xyz
      CF_TTL: 300
      CF_TOKEN: ${CF_TOKEN}
      # logs
      LOG_ENVIRONMENT: dev
      OPENTELEMETRY_ENDPOINT: http://api:8080

    depends_on:
      database:
        condition: service_healthy
